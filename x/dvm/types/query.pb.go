// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fury/dvm/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
// Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1ea3db32381b868, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
// Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1ea3db32381b868, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryPubKeysRequest is the request type for the public keys list query.
// Query/PubKeys RPC method.
type QueryPubKeysRequest struct {
}

func (m *QueryPubKeysRequest) Reset()         { *m = QueryPubKeysRequest{} }
func (m *QueryPubKeysRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPubKeysRequest) ProtoMessage()    {}
func (*QueryPubKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1ea3db32381b868, []int{2}
}
func (m *QueryPubKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubKeysRequest.Merge(m, src)
}
func (m *QueryPubKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubKeysRequest proto.InternalMessageInfo

// QueryPubKeysResponse is the response type for the public keys list query.
// Query/PubKeys RPC method.
type QueryPubKeysResponse struct {
	// list is the list of allowed public keys.
	List []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *QueryPubKeysResponse) Reset()         { *m = QueryPubKeysResponse{} }
func (m *QueryPubKeysResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPubKeysResponse) ProtoMessage()    {}
func (*QueryPubKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1ea3db32381b868, []int{3}
}
func (m *QueryPubKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubKeysResponse.Merge(m, src)
}
func (m *QueryPubKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubKeysResponse proto.InternalMessageInfo

func (m *QueryPubKeysResponse) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

// QueryPublicKeysChangeProposalRequest is the request type for the
// Query/PublicKeysChangeProposal RPC method.
type QueryPublicKeysChangeProposalRequest struct {
	Id     uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status ProposalStatus `protobuf:"varint,2,opt,name=status,proto3,enum=furynet.furynetwork.dvm.ProposalStatus" json:"status,omitempty"`
}

func (m *QueryPublicKeysChangeProposalRequest) Reset()         { *m = QueryPublicKeysChangeProposalRequest{} }
func (m *QueryPublicKeysChangeProposalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPublicKeysChangeProposalRequest) ProtoMessage()    {}
func (*QueryPublicKeysChangeProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1ea3db32381b868, []int{4}
}
func (m *QueryPublicKeysChangeProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPublicKeysChangeProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPublicKeysChangeProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPublicKeysChangeProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPublicKeysChangeProposalRequest.Merge(m, src)
}
func (m *QueryPublicKeysChangeProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPublicKeysChangeProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPublicKeysChangeProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPublicKeysChangeProposalRequest proto.InternalMessageInfo

func (m *QueryPublicKeysChangeProposalRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryPublicKeysChangeProposalRequest) GetStatus() ProposalStatus {
	if m != nil {
		return m.Status
	}
	return ProposalStatus_PROPOSAL_STATUS_UNSPECIFIED
}

// QueryPublicKeysChangeProposalResponse is the response type for the
// Query/PublicKeysChangeProposal RPC method.
type QueryPublicKeysChangeProposalResponse struct {
	// proposal holds the proposal.
	Proposal PublicKeysChangeProposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal"`
}

func (m *QueryPublicKeysChangeProposalResponse) Reset()         { *m = QueryPublicKeysChangeProposalResponse{} }
func (m *QueryPublicKeysChangeProposalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPublicKeysChangeProposalResponse) ProtoMessage()    {}
func (*QueryPublicKeysChangeProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1ea3db32381b868, []int{5}
}
func (m *QueryPublicKeysChangeProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPublicKeysChangeProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPublicKeysChangeProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPublicKeysChangeProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPublicKeysChangeProposalResponse.Merge(m, src)
}
func (m *QueryPublicKeysChangeProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPublicKeysChangeProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPublicKeysChangeProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPublicKeysChangeProposalResponse proto.InternalMessageInfo

func (m *QueryPublicKeysChangeProposalResponse) GetProposal() PublicKeysChangeProposal {
	if m != nil {
		return m.Proposal
	}
	return PublicKeysChangeProposal{}
}

// QueryPublicKeysChangeProposalsRequest is the request type for the
// Query/PublicKeysChangeProposals RPC method.
type QueryPublicKeysChangeProposalsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Status     ProposalStatus     `protobuf:"varint,2,opt,name=status,proto3,enum=furynet.furynetwork.dvm.ProposalStatus" json:"status,omitempty"`
}

func (m *QueryPublicKeysChangeProposalsRequest) Reset()         { *m = QueryPublicKeysChangeProposalsRequest{} }
func (m *QueryPublicKeysChangeProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPublicKeysChangeProposalsRequest) ProtoMessage()    {}
func (*QueryPublicKeysChangeProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1ea3db32381b868, []int{6}
}
func (m *QueryPublicKeysChangeProposalsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPublicKeysChangeProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPublicKeysChangeProposalsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPublicKeysChangeProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPublicKeysChangeProposalsRequest.Merge(m, src)
}
func (m *QueryPublicKeysChangeProposalsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPublicKeysChangeProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPublicKeysChangeProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPublicKeysChangeProposalsRequest proto.InternalMessageInfo

func (m *QueryPublicKeysChangeProposalsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryPublicKeysChangeProposalsRequest) GetStatus() ProposalStatus {
	if m != nil {
		return m.Status
	}
	return ProposalStatus_PROPOSAL_STATUS_UNSPECIFIED
}

// QueryPublicKeysChangeProposalsResponse is the response type for the
// Query/PublicKeysChangeProposals RPC method.
type QueryPublicKeysChangeProposalsResponse struct {
	// proposals hold the proposals.
	Proposals  []PublicKeysChangeProposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals"`
	Pagination *query.PageResponse        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPublicKeysChangeProposalsResponse) Reset() {
	*m = QueryPublicKeysChangeProposalsResponse{}
}
func (m *QueryPublicKeysChangeProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPublicKeysChangeProposalsResponse) ProtoMessage()    {}
func (*QueryPublicKeysChangeProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1ea3db32381b868, []int{7}
}
func (m *QueryPublicKeysChangeProposalsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPublicKeysChangeProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPublicKeysChangeProposalsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPublicKeysChangeProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPublicKeysChangeProposalsResponse.Merge(m, src)
}
func (m *QueryPublicKeysChangeProposalsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPublicKeysChangeProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPublicKeysChangeProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPublicKeysChangeProposalsResponse proto.InternalMessageInfo

func (m *QueryPublicKeysChangeProposalsResponse) GetProposals() []PublicKeysChangeProposal {
	if m != nil {
		return m.Proposals
	}
	return nil
}

func (m *QueryPublicKeysChangeProposalsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "furynet.furynetwork.dvm.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "furynet.furynetwork.dvm.QueryParamsResponse")
	proto.RegisterType((*QueryPubKeysRequest)(nil), "furynet.furynetwork.dvm.QueryPubKeysRequest")
	proto.RegisterType((*QueryPubKeysResponse)(nil), "furynet.furynetwork.dvm.QueryPubKeysResponse")
	proto.RegisterType((*QueryPublicKeysChangeProposalRequest)(nil), "furynet.furynetwork.dvm.QueryPublicKeysChangeProposalRequest")
	proto.RegisterType((*QueryPublicKeysChangeProposalResponse)(nil), "furynet.furynetwork.dvm.QueryPublicKeysChangeProposalResponse")
	proto.RegisterType((*QueryPublicKeysChangeProposalsRequest)(nil), "furynet.furynetwork.dvm.QueryPublicKeysChangeProposalsRequest")
	proto.RegisterType((*QueryPublicKeysChangeProposalsResponse)(nil), "furynet.furynetwork.dvm.QueryPublicKeysChangeProposalsResponse")
}

func init() { proto.RegisterFile("fury/dvm/query.proto", fileDescriptor_c1ea3db32381b868) }

var fileDescriptor_c1ea3db32381b868 = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0x21, 0x0d, 0x74, 0x91, 0x2a, 0xb4, 0xa4, 0x6a, 0xb0, 0x90, 0x1b, 0x59, 0x25,
	0x8d, 0x42, 0xf1, 0x92, 0x70, 0x2e, 0x95, 0x0a, 0x82, 0x03, 0x97, 0xe0, 0xc2, 0x85, 0x4b, 0xb5,
	0x4e, 0x16, 0xd7, 0x6a, 0xe2, 0x75, 0xbd, 0x76, 0x4a, 0x54, 0x72, 0xe9, 0x13, 0x20, 0xf1, 0x0e,
	0x9c, 0x79, 0x8c, 0x08, 0x2e, 0x95, 0xb8, 0x70, 0x42, 0x28, 0xe1, 0x41, 0x90, 0x77, 0xd7, 0xf9,
	0x03, 0x72, 0x5d, 0xa5, 0xa7, 0x58, 0xe3, 0x99, 0x6f, 0x7e, 0xf3, 0x79, 0x46, 0x81, 0xa5, 0xf7,
	0x51, 0x30, 0xc0, 0x9d, 0x7e, 0x0f, 0x9f, 0x44, 0x34, 0x18, 0x98, 0x7e, 0xc0, 0x42, 0x86, 0x36,
	0xe2, 0xa8, 0x47, 0x43, 0x53, 0xfd, 0x9e, 0xb2, 0xe0, 0xd8, 0xec, 0xf4, 0x7b, 0x5a, 0xc9, 0x61,
	0x0e, 0x13, 0x39, 0x38, 0x7e, 0x92, 0xe9, 0x5a, 0xbd, 0xcd, 0x78, 0x8f, 0x71, 0x6c, 0x13, 0x4e,
	0xa5, 0x0e, 0xee, 0x37, 0x6c, 0x1a, 0x92, 0x06, 0xf6, 0x89, 0xe3, 0x7a, 0x24, 0x74, 0x99, 0xa7,
	0x72, 0xef, 0x3b, 0x8c, 0x39, 0x5d, 0x8a, 0x89, 0xef, 0x62, 0xe2, 0x79, 0x2c, 0x14, 0x2f, 0xb9,
	0x7a, 0xbb, 0x3e, 0xc5, 0xf1, 0x49, 0x40, 0x7a, 0x49, 0x78, 0x63, 0x16, 0x0e, 0x98, 0xcf, 0x38,
	0xe9, 0xca, 0x17, 0x46, 0x09, 0xa2, 0xd7, 0x71, 0xbf, 0x96, 0xc8, 0xb6, 0xe8, 0x49, 0x44, 0x79,
	0x68, 0xbc, 0x81, 0x77, 0x17, 0xa2, 0xdc, 0x67, 0x1e, 0xa7, 0x68, 0x17, 0x16, 0xa5, 0x6a, 0x19,
	0x54, 0x40, 0xed, 0x76, 0x73, 0xd3, 0x4c, 0x19, 0xd3, 0x94, 0x85, 0xfb, 0x85, 0xd1, 0xaf, 0xcd,
	0x9c, 0xa5, 0x8a, 0x8c, 0xf5, 0x44, 0x35, 0xb2, 0x5f, 0xd1, 0xc1, 0xb4, 0x59, 0x1d, 0x96, 0x16,
	0xc3, 0xaa, 0x1b, 0x82, 0x85, 0xae, 0xcb, 0xc3, 0x32, 0xa8, 0xdc, 0xa8, 0xad, 0x5a, 0xe2, 0xd9,
	0x38, 0x85, 0x5b, 0x49, 0x6e, 0xd7, 0x6d, 0xc7, 0xe9, 0xcf, 0x8e, 0x88, 0xe7, 0xd0, 0x96, 0x9a,
	0x4a, 0x69, 0xa2, 0x35, 0x98, 0x77, 0x3b, 0x82, 0xb2, 0x60, 0xe5, 0xdd, 0x0e, 0xda, 0x83, 0x45,
	0x1e, 0x92, 0x30, 0xe2, 0xe5, 0x7c, 0x05, 0xd4, 0xd6, 0x9a, 0xdb, 0xe9, 0xe4, 0x4a, 0xe9, 0x40,
	0xa4, 0x5b, 0xaa, 0xcc, 0xf8, 0x08, 0x1f, 0x64, 0x34, 0x56, 0xd4, 0x07, 0xf0, 0x56, 0x62, 0xb1,
	0x72, 0xa9, 0x91, 0xde, 0x2b, 0x45, 0x4c, 0xf9, 0x36, 0x15, 0x32, 0xbe, 0x82, 0x8c, 0xf6, 0x89,
	0x99, 0xe8, 0x05, 0x84, 0xb3, 0x8d, 0x51, 0x00, 0x55, 0x53, 0xae, 0x97, 0x19, 0xaf, 0x97, 0x29,
	0xd7, 0x54, 0xad, 0x97, 0xd9, 0x22, 0x0e, 0x55, 0xb5, 0xd6, 0x5c, 0xe5, 0xf5, 0x0d, 0x1b, 0x01,
	0x58, 0xcd, 0x42, 0x56, 0x96, 0xbd, 0x85, 0xab, 0xc9, 0xa4, 0x5c, 0x7c, 0xed, 0x6b, 0x78, 0x36,
	0x53, 0x42, 0x2f, 0x17, 0xac, 0xc8, 0x0b, 0x2b, 0xb6, 0x33, 0xad, 0x90, 0x4c, 0xf3, 0x5e, 0x34,
	0xbf, 0xac, 0xc0, 0x15, 0x31, 0x0a, 0x1a, 0xc2, 0xa2, 0xdc, 0x6c, 0xf4, 0x30, 0x15, 0xf0, 0xff,
	0x73, 0xd2, 0x76, 0xae, 0x96, 0x2c, 0x5b, 0x1b, 0xe5, 0xf3, 0x1f, 0x7f, 0x3e, 0xe7, 0x11, 0xba,
	0x83, 0xff, 0xb9, 0x65, 0x74, 0x0e, 0xe0, 0x4d, 0x75, 0x25, 0x28, 0x4b, 0x73, 0xe1, 0xc6, 0xb4,
	0x47, 0x57, 0xcc, 0x56, 0x08, 0x9a, 0x40, 0x28, 0x21, 0x34, 0x87, 0x10, 0xd9, 0x87, 0xc7, 0x71,
	0xe3, 0xef, 0x00, 0x96, 0xd3, 0x3e, 0x02, 0xda, 0xcd, 0xec, 0x73, 0xd9, 0xd9, 0x6a, 0x4f, 0x97,
	0x2d, 0x57, 0xdc, 0x8f, 0x05, 0x77, 0x1d, 0xd5, 0x16, 0xb8, 0x63, 0xec, 0xc3, 0x64, 0x2f, 0xf0,
	0x99, 0x5c, 0xd0, 0x21, 0x3e, 0x73, 0x3b, 0x43, 0xf4, 0x0d, 0xc0, 0x7b, 0xa9, 0x1b, 0x8a, 0x96,
	0xe4, 0x99, 0xda, 0xbe, 0xb7, 0x74, 0xbd, 0x1a, 0x68, 0x47, 0x0c, 0x54, 0x45, 0x5b, 0xe9, 0x03,
	0xf1, 0xe9, 0x44, 0xfb, 0xcf, 0x47, 0x63, 0x1d, 0x5c, 0x8c, 0x75, 0xf0, 0x7b, 0xac, 0x83, 0x4f,
	0x13, 0x3d, 0x77, 0x31, 0xd1, 0x73, 0x3f, 0x27, 0x7a, 0xee, 0x5d, 0xdd, 0x71, 0xc3, 0xa3, 0xc8,
	0x36, 0xdb, 0xac, 0x87, 0x15, 0x0a, 0x9e, 0x43, 0xc2, 0x1f, 0x84, 0x74, 0x38, 0xf0, 0x29, 0xb7,
	0x8b, 0xe2, 0x9f, 0xe1, 0xc9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x93, 0x10, 0xca, 0x1d, 0xda,
	0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of PubKeys items.
	PubKeys(ctx context.Context, in *QueryPubKeysRequest, opts ...grpc.CallOption) (*QueryPubKeysResponse, error)
	// Queries an proposal by id and status.
	PublicKeysChangeProposal(ctx context.Context, in *QueryPublicKeysChangeProposalRequest, opts ...grpc.CallOption) (*QueryPublicKeysChangeProposalResponse, error)
	// Queries a list of proposal items by status.
	PublicKeysChangeProposals(ctx context.Context, in *QueryPublicKeysChangeProposalsRequest, opts ...grpc.CallOption) (*QueryPublicKeysChangeProposalsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/furynet.furynetwork.dvm.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PubKeys(ctx context.Context, in *QueryPubKeysRequest, opts ...grpc.CallOption) (*QueryPubKeysResponse, error) {
	out := new(QueryPubKeysResponse)
	err := c.cc.Invoke(ctx, "/furynet.furynetwork.dvm.Query/PubKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PublicKeysChangeProposal(ctx context.Context, in *QueryPublicKeysChangeProposalRequest, opts ...grpc.CallOption) (*QueryPublicKeysChangeProposalResponse, error) {
	out := new(QueryPublicKeysChangeProposalResponse)
	err := c.cc.Invoke(ctx, "/furynet.furynetwork.dvm.Query/PublicKeysChangeProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PublicKeysChangeProposals(ctx context.Context, in *QueryPublicKeysChangeProposalsRequest, opts ...grpc.CallOption) (*QueryPublicKeysChangeProposalsResponse, error) {
	out := new(QueryPublicKeysChangeProposalsResponse)
	err := c.cc.Invoke(ctx, "/furynet.furynetwork.dvm.Query/PublicKeysChangeProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of PubKeys items.
	PubKeys(context.Context, *QueryPubKeysRequest) (*QueryPubKeysResponse, error)
	// Queries an proposal by id and status.
	PublicKeysChangeProposal(context.Context, *QueryPublicKeysChangeProposalRequest) (*QueryPublicKeysChangeProposalResponse, error)
	// Queries a list of proposal items by status.
	PublicKeysChangeProposals(context.Context, *QueryPublicKeysChangeProposalsRequest) (*QueryPublicKeysChangeProposalsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) PubKeys(ctx context.Context, req *QueryPubKeysRequest) (*QueryPubKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubKeys not implemented")
}
func (*UnimplementedQueryServer) PublicKeysChangeProposal(ctx context.Context, req *QueryPublicKeysChangeProposalRequest) (*QueryPublicKeysChangeProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKeysChangeProposal not implemented")
}
func (*UnimplementedQueryServer) PublicKeysChangeProposals(ctx context.Context, req *QueryPublicKeysChangeProposalsRequest) (*QueryPublicKeysChangeProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKeysChangeProposals not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/furynet.furynetwork.dvm.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PubKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPubKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PubKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/furynet.furynetwork.dvm.Query/PubKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PubKeys(ctx, req.(*QueryPubKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PublicKeysChangeProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPublicKeysChangeProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PublicKeysChangeProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/furynet.furynetwork.dvm.Query/PublicKeysChangeProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PublicKeysChangeProposal(ctx, req.(*QueryPublicKeysChangeProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PublicKeysChangeProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPublicKeysChangeProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PublicKeysChangeProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/furynet.furynetwork.dvm.Query/PublicKeysChangeProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PublicKeysChangeProposals(ctx, req.(*QueryPublicKeysChangeProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "furynet.furynetwork.dvm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "PubKeys",
			Handler:    _Query_PubKeys_Handler,
		},
		{
			MethodName: "PublicKeysChangeProposal",
			Handler:    _Query_PublicKeysChangeProposal_Handler,
		},
		{
			MethodName: "PublicKeysChangeProposals",
			Handler:    _Query_PublicKeysChangeProposals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fury/dvm/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPubKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPubKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.List[iNdEx])
			copy(dAtA[i:], m.List[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.List[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPublicKeysChangeProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPublicKeysChangeProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPublicKeysChangeProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPublicKeysChangeProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPublicKeysChangeProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPublicKeysChangeProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPublicKeysChangeProposalsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPublicKeysChangeProposalsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPublicKeysChangeProposalsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPublicKeysChangeProposalsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPublicKeysChangeProposalsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPublicKeysChangeProposalsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposals) > 0 {
		for iNdEx := len(m.Proposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPubKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPubKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPublicKeysChangeProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryPublicKeysChangeProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Proposal.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPublicKeysChangeProposalsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryPublicKeysChangeProposalsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proposals) > 0 {
		for _, e := range m.Proposals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPublicKeysChangeProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPublicKeysChangeProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPublicKeysChangeProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProposalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPublicKeysChangeProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPublicKeysChangeProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPublicKeysChangeProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPublicKeysChangeProposalsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPublicKeysChangeProposalsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPublicKeysChangeProposalsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProposalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPublicKeysChangeProposalsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPublicKeysChangeProposalsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPublicKeysChangeProposalsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposals = append(m.Proposals, PublicKeysChangeProposal{})
			if err := m.Proposals[len(m.Proposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
